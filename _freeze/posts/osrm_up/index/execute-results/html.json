{
  "hash": "cebe8db11747b733ac51b3c968631259",
  "result": {
    "markdown": "---\ntitle: \"New version of `osrm`\"\nauthor: \"Timothée Giraud\"\ndate: \"2022-10-21\"\ncategories: [osrm]\nimage: \"osrm.png\"\ndraft: false\n---\n\n\n\nA major update of the osrm package has been deployed on CRAN last week. In this article I'll explicit the changes introduced by this update and explain the context of this update, the submission of a paper about the package in [Journal of Open Source Software]()(JOSS). \n\n\n## The update\n\nThis major release introduces a fairly large amount of changes, by that I mean breaking changes. \n\n### `sp` support \nThe sp support has been removed from all function for input and output objects.\nUsers will no longer have the possibility to use an sp objects as input or output. Most of rspatial users and package developpers have moved from the old sp/rgeos/rgdal trilogy toward the sf world. \n\n### Refactoring of the request handling process \nThe way requests are sent to the OSRM server (local/remote/demo) has been rethinked in order to get more informative messages. Indeed, an important share of the issues posted on the osrm gh repo have been about cryptic or non helpful error messages sent by the package. So in this release OSRM server errors are more explicit and well transmitted to the user. \n\n### Dependencies   \nOSRM request are received as json files to the package. Former versions of the package used `jsonlite`. Following a suggestion by ***** I've replaced this package by a much more efficient package (for large files) `RcppSimdJson`. The drawback of this change is the use of a C++ dependent package.   \nThe construction of isochrones as polygons was based on an ad-hoc code based on `isoband`. This piece of code was replicated in 2 other packages (`tanaka` and `potential`). I've decided to create the `mapiso` package to avoid an unnecessary maintenance burden and fortify the underlyong code. \n\n\n{{< tweet rgeomatic 1546864134662356992 >}}\n\n\n\n\n### Input types\nInput type checking has been largely improved. This improvement have lead to a modification of the set of valid input of functions. \nMost functions accepts data.frame, matrix, sfc or sf objects. \nThe way identifier are handled has also been improved (use of row.names or indexes if row.names are not relevant, e.g. for sfc objects or some matrices)\n\nSee the NEWS file for the complete list of changes. \n\n\n## The paper in JOSS\n\n\n\n> JOSS publishes articles about research software. This definition includes software that: solves complex modeling problems in a scientific context [...]; supports the functioning of research instruments or the execution of research experiments; extracts knowledge from large data sets; offers a mathematical library; or similar.  \n> JOSS submissions must:     \n>\n    * Be open source\n    * Have an obvious research application.  \n    * Be feature-complete (no half-baked solutions) and be designed for maintainable extension (not one-off modifications).  \n    * Minor 'utility' packages, including 'thin' API clients, and single-function packages are not acceptable.  \n\nAnd \n\n> After submission: \n>\n  * An Associate Editor-in-Chief will carry out an initial check of your submission, and proceed to assign a handling editor.\n   * The handling editor will assign two or more JOSS reviewers, and the review will be carried out in the JOSS reviews repository.\n   * Authors will respond to reviewer-raised issues (if any are raised) on the submission repository’s issue tracker. Reviewer and editor contributions, like any other contributions, should be acknowledged in the repository.\n   * Upon successful completion of the review, authors will make a tagged release of the software, and deposit a copy of the repository with a data-archiving service such as Zenodo or figshare, get a DOI for the archive, and update the review issue thread with the version number and DOI.\n  *  After we assign a DOI for your accepted JOSS paper, its metadata is deposited with CrossRef and listed on the JOSS website.\n  * The review issue will be closed, and an automatic tweet from @JOSS_TheOJ will announce it!\n\nSo the review process of the paper happens in the open. You can have a look here. \n\nSubmitting a paper to JOSS assure you to have your software inspected by a bunch of competent people and I can say that this process help me to make the package more ergonomic and fix problems I didn't wanted to. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mapsf)\nmtq <- mf_get_mtq()\nmf_map(mtq)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(1:10)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}