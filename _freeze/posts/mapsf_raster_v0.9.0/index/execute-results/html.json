{
  "hash": "0bd4bfdd350d9347432c7487d0b18b12",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Raster maps with `mapsf`\"\nauthor: \"Timoth√©e Giraud\"\ndate: \"2024-01-31\"\ncategories: [mapsf]\nimage: \"front.png\"\ndraft: false\nresources:\n  - raster_data.zip\n\n---\n\n\n`mapsf` focuses on creating thematic maps based on vector data, maps are mainly generated from `sf` objects.   \nHowever, the latest update of `mapsf` (v0.9.0) expands its mapping capabilities for raster data. Emulating features from `terra` (and leveraging its plotting functions internally), `mf_raster()` now provides three map types for single band rasters: **classes**, **continuous**, and **interval**.  \nRaster maps benefit from all map layout elements (title, scale bar, north arrow, graticules...) and can be mixed with vector objects.     \n\n\n\n<small>Download datasets used in examples:</small> [{{< fa download >}}](raster_data.zip)\n\n\n## Classes\n\nThis type of map is suitable for qualitative data (categories, typologies).   \nIn this example we display a map of Corine Land Cover classes over the Lot region in France. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mapsf)\n\n# import raster\nclc <- terra::rast(\"clc_46.tif\")\n\n# import vector (Lot region polygon)\ndep <- sf::st_read(\"dep.gpkg\", \"dep\", quiet = TRUE) \n\n# define a color palette\nclc_pal <- c(\"#E6004D\", \"#FF0000\", \"#CC4DF2\", \"#CC0000\", \"#E6CCE6\", \"#A600CC\", \n             \"#FFE6FF\", \"#FFFFA8\", \"#E68000\", \"#F2A64D\", \"#E6E64D\", \"#FFE64D\", \n             \"#E6CC4D\", \"#80FF00\", \"#00A600\", \"#4DFF00\", \"#CCF24D\", \"#A6FF80\", \n             \"#A6E64D\", \"#A6F200\", \"#00CCF2\", \"#80F2E6\")\n\n# map the raster\nmf_raster(clc, pal = clc_pal, expandBB = c(0, 0.5, 0.05, 0),\n          leg_title = \"\", leg_size = .7, leg_box_cex = c(.6, .85),\n          leg_pos = \"topleft\")\n\n# add region borders \nmf_map(dep, col = NA, lwd = 2, add = TRUE)\n\n# add graticules\nmf_graticule(clc, lty = 2, lwd = .3, cex = 0.5, col = \"grey20\")\n\n# add map layout elements\nmf_title(\"CORINE Land Cover - Lot region - 2018\", tab = FALSE, pos = \"center\") \nmf_credits(\"T. Giraud, 2024 | EEA 2018\")\nmf_arrow(pos = \"topright\", adjust = clc)\nmf_scale(10)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=816}\n:::\n:::\n\n\n\n\n\n## Continuous\n\nThis type of map is appropriate for quantitative data such as DEM, surface temperature or vegetation index.   \nIn the following examples we display elevation maps of the Lot region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import raster\nelev <- terra::rast(\"elev_46.tif\")\n\n# map the raster\nmf_raster(elev, leg_pos = \"topleft\")\n\n# add layout elements\nmf_title(\"Elevation - Lot region\") \nmf_credits(\"SRTM 90m DEM Digital Elevation Database, 2018\")\nmf_arrow(pos = \"topright\", adjust = elev)\nmf_scale(5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=576}\n:::\n:::\n\n\nThe colors are set using a palette name or a vector of colors to map the continuous values.  \nSee `?hcl.colors()` examples to check palette names and colors.\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\n# select a palette with a palette name\nmf_raster(elev, pal = \"Rocket\", expandBB = c(0,0,0,.3))\nmf_title('Continuous palette based on \"Rocket\"')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=480}\n:::\n\n```{.r .cell-code}\n# define a palette with colors (from red to black)\nmf_raster(elev, pal = c(\"#fe5234\", \"#000000\"), expandBB = c(0,0,0,.3))\nmf_title('Continuous palette from \"#fe5234\" to \"#000000\"')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.png){width=480}\n:::\n:::\n\n\n\nIt is also possible to give break values and corresponding colors. Breaks are inflection points of the color scale. \nIn this example the color palette varies from white to khaki between 67 and 150, then from khaki to darkgreen between 150 and 550, and finally from darkgreen to black between 550 and 776.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set a cartographic theme\nmf_theme(\"green\", bg = \"black\")\n\n# map the raster\nmf_raster(elev, breaks = c(67, 150, 550, 776), \n          pal = c(\"white\", \"khaki\", \"darkgreen\", \"black\"),\n          leg_val_rnd = 0, leg_pos = \"topleft\", leg_box_cex = c(.65, 1),\n          leg_title = \"Elevation (m)\", leg_horiz = TRUE, leg_frame = TRUE, \n          leg_frame_border = NA, leg_bg = \"grey20\")\n\n# add an inset \nmf_inset_on(x = \"worldmap\", pos = \"bottomright\", cex = .2)\nmf_worldmap(x = elev)\nmf_inset_off()\n\n# add layout elements\nmf_title(\"Elevation - Lot region\", tab = FALSE, pos = \"center\") \nmf_credits(\"T. Giraud, 2024 | SRTM 90m DEM Digital Elevation Database, 2018\", \n           bg = \"#000000CC\")\nmf_arrow(pos = \"topright\", adjust = elev)\nmf_scale(5)\n\n# add annotations\nmax_elev_coord <- terra::xyFromCell(elev, terra::where.max(elev)[2])[1,]\nmf_annotation(x = max_elev_coord, \"Highest Point\", \n              col_arrow = \"white\", col_txt = \"white\", \n              pos = \"bottomleft\", halo = TRUE, cex = 1.2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=816}\n:::\n:::\n\n\n\n\n\n\n## Interval\n\nThis type of map is also appropriate for quantitative data.     \nNumerical values are classified using one the methods provided by `mf_get_breaks()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set a cartographic theme\nmf_theme(\"default\")\n\n# map the raster\nmf_raster(elev, type = \"interval\", \n          breaks = \"q6\", pal = \"Turku\", rev = TRUE,\n          leg_val_rnd = 1, leg_pos = \"topleft\", leg_title = \"Elevation (m)\")\n\n# add layout elements\nmf_title(\"Elevation - Lot region\", tab = FALSE, pos = \"center\") \nmf_credits(\"SRTM 90m DEM Digital Elevation Database, 2018\", \n           pos = \"rightbottom\")\nmf_arrow(pos = \"topright\")\nmf_scale(5, pos = \"bottomleft\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=816}\n:::\n:::\n\n\n\n## Multiband\n\nThe last kind of map that `mf_raster()` can take care of is RGB composite maps using three bands. \n\nIn the following example we download an image from Open Street Map and display it. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(maptiles)\ndep <- sf::st_transform(dep, \"EPSG:3857\")\n\n# get an OpenStreetMap image on the region\n(osm <- get_tiles(x = dep, provider = \"OpenStreetMap\", crop = TRUE, zoom = 9))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 433, 448, 3  (nrow, ncol, nlyr)\nresolution  : 305.7481, 305.7481  (x, y)\nextent      : 109152.1, 246127.2, 5496740, 5629129  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / Pseudo-Mercator (EPSG:3857) \nsource(s)   : memory\ncolors RGB  : 1, 2, 3 \nnames       : lyr.1, lyr.2, lyr.3 \nmin values  :     3,    54,     3 \nmax values  :   251,   249,   244 \n```\n\n\n:::\n\n```{.r .cell-code}\n# set them margins\nmf_theme(mar = c(0,0,0,0))\n\n# display the map\nmf_raster(osm)\n\n# add region limits\nmf_map(dep, add = TRUE, col = NA, lwd = 3)\n\n# add attribution\nmf_credits(get_credit(\"OpenStreetMap\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=492}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}