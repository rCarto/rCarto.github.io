{
  "hash": "eb7add0031d2919a8ae536c78424e3e1",
  "result": {
    "markdown": "---\ntitle: \"`mapsf` update and `maplegend` introduction\"\nauthor: \"Timoth√©e Giraud\"\ndate: \"2023-11-24\"\ncategories: [mapsf, maplegend]\nimage: \"leg.png\"\ndraft: false\nbibliography: references.bib\n---\n\n\nAn update of `mapsf` has been deployed on CRAN. In this article I will describe the changes introduced by this update.\n\nThe two main points are:\n\n- the use of `maplegend` to plot legends,\n- the introduction of a new function `mf_distr()` to visualize univariate distributions.\n\n\n## Legends\n\nOne of the main change introduced in the lastest release of `mapsf` is the use of the `maplegend` [@maplegend] package to plot all legends. \n\n### The `maplegend` package\n\n[`maplegend`](https://github.com/riatelab/maplegend) is a new package offering a wide range of legends.\nThis package is primarily intended as a backend for building\nlegends in `mapsf`. However, it can also be used independently from `mapsf` with `base`\nplots or even with [`igraph` plots](https://gist.github.com/rCarto/da5a4b0cd982a8c85cb847506fd2f415).\n\nThe main function is `leg()`. Its `type` argument defines the legend\ntype.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(maplegend)\nlibrary(mapsf)\nm <- mf_get_mtq()\nmf_map(m, col = \"grey90\", border = \"grey80\")\nmf_title(\"maplegend demo\")\n\n# Proportional symbols\nleg(type = \"prop\", val = c(10, 50, 100), pos = \"topleft\", \n    mar = getOption(\"mapsf.mar\"), \n    title = \"type = 'prop'\")\nleg(type = \"prop\", val = c(10, 50, 100), pos = \"left\", \n    horiz = TRUE, mar = getOption(\"mapsf.mar\"), \n    title = \"type = 'prop', horiz = TRUE\")\n\n# Choropleth \nleg(type = \"choro\", val = c(10, 20, 30, 40, 50), pos = \"top\",\n    title = \"type = 'choro'\")\nleg(type = \"choro\", val = c(10, 20, 30, 40, 50), pos = \"topright\", \n    horiz = TRUE,\n    title = \"type = 'choro', horiz = TRUE\")\n\n# Typologie\nleg(type = \"typo\", val = c(\"A\", \"B\", \"C\"), pos = \"right\", \n    title = \"type = 'typo'\")\n\n# Symbols\nleg(type = \"symb\", val = c(\"A\", \"B\", \"C\"), pos = \"bottomleft\", \n    pal = 1:3, \n    title = \"type = 'symb'\")\n\n# Continuous\nleg(type = \"cont\", val = c(10, 20, 30, 40, 50), pos = c(722257.6, 1640619), \n    horiz = TRUE,\n    title = \"type = 'cont', horiz = TRUE\")\nleg(type = \"cont\", val = c(10, 20, 30, 40, 50), pos = c(722257.6, 1634576), \n    title = \"type = 'cont'\")\n\n# Proportional lines\nleg(type = \"prop_line\", val = c(5, 50, 100), pos = \"bottom\", \n    lwd = 20, \n    title = \"type = 'prop_line'\")\n\n# Graduated lines\nleg(type = \"grad_line\", val = c(1, 4, 10, 15), pos = \"bottomright\", \n    lwd = c(1, 5, 10), \n    title = \"type = 'grad_line'\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=768}\n:::\n:::\n\n\n\nCompound or stacked legends can be created with `leg_comp()` and `leg_draw()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmf_map(m)\nmf_title(\"Stacked legends\")\nleg_comp(type = \"prop\", val = c(10, 50, 100)) |>\n  leg_comp(type = \"typo\", val = c(\"A\", \"B\", \"C\")) |>\n  leg_draw(pos = \"bottomleft\", bg = \"lightblue\", fg = \"darkblue\", \n           frame_border = NA, mar = getOption(\"mapsf.mar\"), size = .9)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=384}\n:::\n:::\n\n\n::: {.callout-warning}\n## `maplegend` and `mapsf`\n\n* You can use `maplegend::leg()` on maps created with `mapsf` but the preferred way is to use the `mf_legend()` function, which wraps `maplegend::leg()` with default values consistent with the current theme. \n\n* If you need to use `maplegend` with `mapsf` maps, to create compound legends for example, remember to fill the `mar` argument with the margin values of the current theme (`getOption(\"mapsf.mar\")`) when using proportional symbols legends.\n\n:::\n\n\n### Legends in `mapsf`\n\nA consequence of using `maplegend` in `mapsf` is the addition of several legend-related arguments in `mf_map()` to refine the legend display : `leg_frame_border`, `leg_horiz`, `leg_adj`, `leg_bg`, `leg_fg`, `leg_size`, `leg_border`, `leg_box_border`, `leg_box_cex`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmf_map(m, \"MED\", type = \"choro\", \n       leg_pos = 'topright',\n       leg_val_rnd = -2,\n       leg_horiz = TRUE, \n       leg_box_border = NA,\n       leg_box_cex = c(.6,2),\n       leg_title = \"Median Income\"\n       )\nmf_map(m, \"POP\", type = \"prop\", \n       leg_title = 'Population',\n       leg_pos = \"bottomleft\",\n       leg_size = 2, \n       leg_frame = TRUE, \n       leg_bg = \"ivory3\", \n       leg_fg = \"tomato4\", \n       leg_frame_border = NA, \n       leg_adj = c(0, 2))\nmf_credits(\"TG 2023\\nmapsf v0.8.0\")\nmf_title(\"mf_map(..., leg_*) demo\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=480}\n:::\n:::\n\n\nLegends for continuous rasters have been introduced. \n\n::: {.cell}\n\n```{.r .cell-code}\nr <- terra::rast(system.file(\"ex/elev.tif\", package = \"terra\"))\nmf_raster(r)\nmf_title(\"Legends for continuous rasters\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=384}\n:::\n:::\n\nSupport for \"classes\" and \"interval\" types will be added in future versions.  \n\n\n::: {.callout-warning}\nAll `mf_legend_*()` function are deprecated. Use `mf_legend()` with the appropriate type instead.\n:::\n\n\n## New features\n\n### `mf_distr()`\n\n`mf_distr()` is a function that displays a statistical distribution using a histogram, a box plot, a strip chart and a density curve on the same plot.  \nThis function was introduced to help users choose a method for creating class intervals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mapsf)\nmf_distr(rnorm(1000))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n### `rev` argument\n\nA `rev` argument has been added in `mf_map()`.  \n`rev = TRUE` reverses the color order of the named palettes specified with the `pal` argument.\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nmf_theme(\"default\", mar = c(0, 0, 0, 0))\nmf_map(m, \"MED\", type = \"choro\", breaks = \"quantile\", \n       pal = \"Inferno\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=288}\n:::\n\n```{.r .cell-code}\nmf_theme(\"green\", mar = c(0, 0, 0, 0))\nmf_map(m, \"MED\", type = \"choro\", breaks = \"quantile\", \n       pal = hcl.colors(7,\"Inferno\"), rev = T)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-2.png){width=288}\n:::\n:::\n\n\n\n-----\n**See the [NEWS file](https://raw.githubusercontent.com/riatelab/mapsf/master/NEWS.md) for the complete list of changes.**\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}