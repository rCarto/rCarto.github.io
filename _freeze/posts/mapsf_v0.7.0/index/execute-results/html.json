{
  "hash": "bb82800fdc508f11cf090d5e710c65c8",
  "result": {
    "markdown": "---\ntitle: \"New release of `mapsf`\"\nauthor: \"Timoth√©e Giraud\"\ndate: \"2023-07-11\"\ncategories: [mapsf]\nimage: \"grat.png\"\ndraft: false\nbibliography: references.bib\n---\n\n\nA minor update of `mapsf` has been deployed on CRAN. In this article I'll describe the changes introduced by this update. \n\n\n## New features\n\n### `expandBB`\n\nAn `expandBB` argument has been introduced in `mf_map()`. This argument allows to add some space around a map. \n\nThe following code displays a map with some extra space on the right side of the figure. This can be useful to add legends or annotations. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mapsf)\nlibrary(sf)\nnc_raw <- st_read(system.file(\"shape/nc.shp\", package=\"sf\"), quiet = TRUE)\nnc <- st_transform(nc_raw, \"EPSG:32019\")\nth <- mf_theme(\"candy\", mar = c(0, 0, 0, 0), bg = \"ivory\")\nmf_map(nc, expandBB = c(0, 0, 0, .3), width = 3.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# mf_get_ratio(nc[1,], expandBB = c(0,0.5,0,0), width = 3.5)\n```\n:::\n\n\nThis addition makes the `mf_init()` function virtually useless. These two script produce the same output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1,2))\n# with mf_init()\nmf_init(nc[1, ],  expandBB = c(0, .5, 0, 0))\nmf_map(nc, add = TRUE)\nmf_map(nc[1, ], col = \"red\", add = TRUE)\n# without mf_init()\nmf_map(nc[1, ], col = NA, border = NA, expandBB = c(0, .5, 0, 0))\nmf_map(nc, add = TRUE)\nmf_map(nc[1, ], col = \"red\", add = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nThis argument has also been added to `mf_raster()`.\n\n\n### `mf_graticule()`\n\nA new `mf_graticule()` function has been added to the package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmf_map(nc, expandBB = c(0, .05, .1, 0))\nmf_graticule(nc, add = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nGraticules labels can be added on the four sides of the map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmf_map(nc, expandBB = c(.1, .05, .1, .05))\nmf_graticule(nc, \n             pos = c(\"bottom\", \"left\", \"top\", \"right\"), \n             lty = 2, \n             lwd = 2, \n             add = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-warning}\nFrom [`st_graticule()`](https://r-spatial.github.io/sf/reference/st_graticule.html#use-of-graticules):  \nIn cartographic visualization, the use of graticules is not advised, unless the graphical output will be used for measurement or navigation, or the direction of North is important for the interpretation of the content, or the content is intended to display distortions and artifacts created by projection. Unnecessary use of graticules only adds visual clutter but little relevant information. Use of coastlines, administrative boundaries or place names permits most viewers of the output to orient themselves better than a graticule.\n:::\n\n\n## Fixes\n\n### Pipe\n\nThe pipe compatibility of `mapsf` has been enhanced and it now works on most use cases.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmf_get_mtq() |>\n  mf_map(col = \"ivory4\") |>\n  mf_map(\"POP\", \"prop\") |>\n  mf_graticule(label = FALSE, lwd = .2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=384}\n:::\n:::\n\n\n### Themes\n\nThe graphic theme feature has been refactored. The current theme parameters are now accessible via R options (with the **mapsf.** prefix).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mf_theme(\"green\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$bg\n[1] \"#1B1D16\"\n\n$fg\n[1] \"#D7FF68\"\n\n$mar\n[1] 0.5 0.5 2.0 0.5\n\n$tab\n[1] FALSE\n\n$pos\n[1] \"center\"\n\n$inner\n[1] FALSE\n\n$line\n[1] 1.5\n\n$cex\n[1] 1\n\n$font\n[1] 2\n```\n:::\n\n```{.r .cell-code}\ngetOption(\"mapsf.bg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"#1B1D16\"\n```\n:::\n\n```{.r .cell-code}\ngetOption(\"mapsf.fg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"#D7FF68\"\n```\n:::\n\n```{.r .cell-code}\ngetOption(\"mapsf.pos\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"center\"\n```\n:::\n\n```{.r .cell-code}\n# etc\n```\n:::\n\n\nThe current theme is applied to all maps and there is no need to use the `theme` argument in `mf_export()` or `mf_init()` anymore. \n\n\n## Next steps\n\nThe next release of `mapsf` will use the [`maplegend`](https://github.com/riatelab/maplegend) package (not on CRAN yet) for plotting legends. This will allow to plot horizontal legends ([#19](https://github.com/riatelab/mapsf/issues/19)) and continuous legends for rasters ([#22](https://github.com/riatelab/mapsf/issues/22)).\n\n\n-----\n\n**See the [NEWS file](https://raw.githubusercontent.com/riatelab/mapsf/master/NEWS.md) for the complete list of changes.**\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}