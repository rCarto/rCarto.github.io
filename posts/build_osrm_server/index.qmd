---
title: "How to Build an European-Wide OSRM Server on a Desktop Computer"
author: "Timoth√©e Giraud"
date: "2023-07-27"
categories: [osrm]
image: "grat.png"
draft: true
bibliography: references.bib
---


## OSRM 

[Open Source Routing Machine](https://github.com/Project-OSRM/osrm-backend), or OSRM [@luxen-vetter-2011], is a routing service based on OpenStreetMap (OSM) data. OSRM can be use to find the fastest route between points, to compute time or distance matrices between set of points or to solve the Traveling Salesman Problem.


As the maintainer of the R package `osrm` [@giraud2022] I often find myself advising users to use their own instance of OSRM to enable them to send a large number of requests and not overload the demo server. In these cases I simply point to the Docker installation instructions in the project's [README](https://github.com/Project-OSRM/osrm-backend#using-docker) file. These instructions may not be detailed enough to build an OSRM instance on a large area.   
OSRM use **a lot** of RAM to prepare the road network for requests and using only these instructions will probably result in message like this one:  
```sh 
[warn] Please provide more memory or consider using a larger swapfile
```
In this post I'll explain how to build and European-wide OSRM instance on a desktop computer. These explanations are, to a certain extent, also valid when using a remote server. 


::: {.callout-note}
This post implies some linux/CLI knowledge from its reader. I will not explain how to install Docker nor how to use a terminal. 
:::



## Hardware

I use my personal laptop computer which has a 1To SSD hard drive and this config:

<pre><span style="color:#C01C28"><b>OS</b></span>: Debian GNU/Linux 12 (bookworm) x86_64 
<span style="color:#C01C28"><b>Host</b></span>: HP EliteBook 840 G8 Notebook PC 
<span style="color:#C01C28"><b>Kernel</b></span>: 6.1.0-10-amd64 
<span style="color:#C01C28"><b>CPU</b></span>: 11th Gen Intel i7-1185G7 (8) @ 4.800GHz 
<span style="color:#C01C28"><b>Memory</b></span>: 31.04GiB </pre>

## Add some extra memory

The preparation of the OSM network for OSRM is memory intensive and will need more than the already available 32Go of RAM. The [swap memory](https://en.wikipedia.org/wiki/Memory_paging) is used when a program consume the totality of the available RAM memory. Consequently we need to [extend the swap memory](https://github.com/Project-OSRM/osrm-backend/wiki/Running-OSRM#extracting-the-road-network-osrm-extract) of our computer. I use a very large file to be sure to not exceed the limit. 

```sh
sudo fallocate -l 200G swap.swap
sudo chmod 600 swap.swap
sudo mkswap swap.swap
sudo swapon swap.swap
sudo sysctl vm.swappiness=20
```

## Download the OSM road network

The [Geofabrik website](https://www.geofabrik.de/) provides [OSM database extracts](https://download.geofabrik.de/) that can be used as input for OSRM. 
In our case we have downloaded **osm.pbf** file for Europe (27.1 GB).

## Build the dataset for OSRM

The **eurpope-latest.osm.pbf** file needs to be processed to be used by OSRM. This is done in three steps. 

1. Extract (~5h30)
```sh
docker run -t -v "${PWD}:/data" ghcr.io/project-osrm/osrm-backend:v5.27.1 osrm-extract -p /opt/car.lua /data/europe-latest.osm.pbf
```

2. Partition (~1h20)
```sh
docker run -t -v "${PWD}:/data" ghcr.io/project-osrm/osrm-backend:v5.27.1 osrm-partition /data/europe-latest.osrm
```

3. Customize (~0h10)
```sh
docker run -t -v "${PWD}:/data" ghcr.io/project-osrm/osrm-backend:v5.27.1 osrm-customize /data/europe-latest.osrm
```


## Run the instance

This is the command I use to run this freshly built OSRM instance:

```sh
docker run --rm -t -i -p 5000:5000 -v "${PWD}:/data" ghcr.io/project-osrm/osrm-backend:v5.27.1 osrm-routed --algorithm mld --max-table-size 50000000 /data/europe-latest.osrm
```

## Example of use

This OSRM instance will actually be used in the framework of an European research program (GRANULAR, add links). In this project we'll need to request a very large number of distances and route througout Europe. 
I built a small R package (not on CRAN) relying on `osrm` to take send queries in a prallel fashion. 

Here is a small demo of the package

....






